

#read_data
read csv data > convert into dictionary

#UnitStats object
create unitstats objects for a unit based on parameters, i.e. weapon, artifact set, constellations, etc
assign attributes based on parameters and how they're mapped by the dictionaries

#unitspecific functions
create functions which update attributes based on parameters, i.e. variables that depend on constellations, talent levels, etc

#weaponspecific functions
create functions which update attributes based on parameters, i.e. variables that depend on weapon rank, specific weapons, etc

#artifactspecific functions
create functions which update attributes based on artifact sets, i.e. variables that depend on ?

#UnitStatsUpd
run specific functions based on unit attributes (from parameters of unit() object) to update stats

#UsefulStats
#Maybe skip this part since could complicate things unnecessarily
compile UnitStats attriutes into useful attributes i.e. total_atk, crit_multiplier, etc

#UnitDamage
compile UsefulStats into damage for each action

#ActionList
compile UnitDamage for team's rea

#WeirdConstellations
c6 fischl

#Sim
check team for highest dps action
get which method / unit created it


#Adding time
Let's say Action 1 takes 0.7s
If Action 2 (Next action) is created by another chosen_unit, add artificial time to that action
    if the last action took <1s

To do list:
[x] Artifact Substats
[x] Constellations 
[ ] Weapon Ranks
[x] Buffs
[x] Debuffs
[ ] Reactions

#Buffs
Bennett Q - atk
Mona Q - dmg
Mona C4 - crit
Traveler (Geo) C1 - crit
Xinyan A4 - phys
Bennett C6 - pyro
Archaic Petra - geo
Noblesse - atk
Sucrose C6 - dmg
Sucrose A2 - em
Sucrose A4 - em
Diona C6 - em
Albedo - em
Albedo - dmg
Chongyun E - atk speed
Thrilling tales = atk
Klee C6 - Pyro
Wgs - atk
Amber C6 - atk
Ganyu Q/A4 - cryo
Ganyu c4 - dmg
Jean c2 - atk speed
Venti c4 - anemo
Diluc A4 - pyro
Xiangling c6 - pyro
Beidou a4 - atk speed, normal/charged dmg
Ganyu a2 - crit
keqing a4 - crit / er
chong c2 - cdr
noelle q - def>atk

rancour - atk/def
whiteblind - atk/def


# Triggerable / Active Buff Implementation
Triggerable Buffs are an object attached to a character, i.e. unit.triggerable_buffs = {buffobject1, buffobject2}
if they are triggered, they are moved active buffs i.e. unit.active_buffs = {buffobject1, buffobject2}
while in unit.active_buffs they can call a method from 'ActiveBuffs' class which affected live_stat
this way you can have buffs that don't necessarily add or remove stats, i.e. ones that change a unit's attack type (infusion)

Each triggerable_buffs needs information:
1 - name
2 - method to call
3 - duration
4 - if its shared or not

Each active buffs needs parameters:
1 - name
2 - method_name to call
3 - duration